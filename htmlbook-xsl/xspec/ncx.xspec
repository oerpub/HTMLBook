<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../epub.xsl">

  <!-- Test suite for ncx.xsl -->

  <!-- Global params for testing -->

  <x:param name="metadata.title" select="'Infinite Jest'"/>

  <x:param name="label.and.title.separator" select="'. '"/>

  <x:param name="label.numeration.by.data-type">
appendix:A
chapter:1
part:I
sect1:none
sect2:none
sect3:none
sect4:none
sect5:none
  </x:param>

  <x:param name="ncx.toc.section.depth" select="2"/>

  <x:scenario label="When generating full NCX TOC content">
    <x:call template="generate.ncx.toc.content">
      <!-- Test XSL is output to a subdir of the .xspec dir, which also contains skeleton, so relative path contains .. to go up a directory level -->
      <x:param name="toc.node" select="document('../skeleton.html')/*"/>
    </x:call>
    
    <x:expect label="It should have the standard ncx root element">
      <ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1">...</ncx>
    </x:expect>
    
    <x:scenario label="With generate.cover.html disabled">
      <x:call>
	<x:param name="generate.cover.html"/>
      </x:call>
      <x:expect label="It *should not* have a meta element for the cover HTML" test="not(exists(/ncx:ncx/ncx:head/ncx:meta[@name='cover']))"/>	
    </x:scenario>
    
    <x:scenario label="With generate.cover.html enabled">
      <x:call>
	<x:param name="generate.cover.html">1</x:param>
      </x:call>
      <x:expect label="It should have a meta element for the cover HTML" test="count(/ncx:ncx/ncx:head/ncx:meta[@name='cover']) = 1"/>
    </x:scenario>

    <x:pending>
      <x:scenario label="With ncx.include.root.chunk enabled">
	<x:expect label="navPoint for root chunk should be generated"/>
      </x:scenario>

      <x:scenario label="With ncx.include.root.chunk disabled">
	<x:expect label="navPoint for root chunk *should not* be generated"/>
      </x:scenario>
    </x:pending>
    
    <x:expect label="It should have the book title in a docTitle element" test="exists(/ncx:ncx/ncx:docTitle[. = 'Infinite Jest'])"/>
    
    <x:expect label="It should have a navMap with navPoint children for TOC elements" test="exists(/ncx:ncx/ncx:navMap[ncx:navPoint])"/>

    <x:expect label="navPoints should have playOrder attributes in consecutive order" 
	      test="not(exists(//ncx:navPoint[not(@playOrder)])) and
		    count((//ncx:navPoint)[position() = @playOrder]) = count((//ncx:navPoint))"/>
  </x:scenario>

    <x:scenario label="When a book section/div is matched in ncx.toc.gen mode">
      <x:context mode="ncx.toc.gen">
	<section data-type="chapter">
	  <h1>Test Chapter</h1>
	  <p>It was the best of times!</p>
	</section>
      </x:context>
      <x:expect label="return a navPoint">
        <ncx:navPoint id="...">...</ncx:navPoint>
      </x:expect>

      <!-- Note: the following test is dependent on the global param set in this xspec document -->
      <!-- If test fails, double-check expected value is in sync with these params -->
      <x:scenario label="when source TOC elements are at a lower level than specified NCX Level">
	<x:context mode="ncx.toc.gen" select="//h:section[@data-type='sect3'][1]">
	  <section data-type="chapter">
	    <h1>Test Chapter</h1>
	    <p>It was the worst of times!</p>
	    <section data-type="sect1">
	      <h1>Test Sect1</h1>
	      <p>Two roads diverged in a wood</p>
	      <section data-type="sect2">
		<h2>Test Sect2</h2>
		<p>One fish, two fish, red fish, blue fish</p>
		<section data-type="sect3">
		  <h3>Test SEct3</h3>
		  <p>It was a dark and stormy night</p>
		</section>
	      </section>
	    </section>
	  </section>
	</x:context>
	<x:expect label="Don't generate a navPoint" test="not(exists(ncx:navPoint))"/>
      </x:scenario>
    </x:scenario>

    <x:scenario label="When a non-book section/div is matched in ncx.toc.gen mode that does not have a book section/div child">
      <x:context mode="ncx.toc.gen">
	<div data-type="note">
	  <p>Notes should not get navPoints!!!</p>
	</div>
      </x:context>
      <x:expect label="Don't generate a navPoint" test="not(exists(ncx:navPoint))"/>
    </x:scenario>

    <x:scenario label="When a nav TOC is matched in ncx.toc.gen mode...">
      <x:context mode="ncx.toc.gen">
	<nav data-type="toc"/>
      </x:context>

      <x:scenario label="...with $nav.in.ncx enabled">
	<x:context>
	  <x:param name="nav.in.ncx" select="1"/>
	</x:context>
	<x:expect label="Generate a navPoint">
	  <ncx:navPoint id="...">...</ncx:navPoint>
	</x:expect>
      </x:scenario>
      
      <x:scenario label="...with $nav.in.ncx disabled">
	<x:context>
	  <x:param name="nav.in.ncx" select="0"/>
	</x:context>
	<x:expect label="*Do not* generate a navPoint"
		  test="not(exists(ncx:navPoint))"/>
      </x:scenario>
    </x:scenario>

    <x:scenario label="When generate.navpoint is called">
      <x:call template="generate.navpoint">
	<x:param name="node">
	  <section data-type="appendix">
	    <h1>Tables of Crucial Data</h1>
	    <p>Read me, please!</p>
	  </section>
	</x:param>
      </x:call>
      <x:expect label="A navPoint element should be generated with proper id" 
		test="count(ncx:navPoint[contains(@id, 'appendix')]) = 1"/>

      <x:expect label="A navLabel element should be generated with properly formatted heading text" 
		test="count(ncx:navPoint/ncx:navLabel[contains(., 'Tables of Crucial Data')]) = 1"/>

      <x:scenario label="with $ncx.toc.include.label enabled">
	<x:call>
	  <x:param name="ncx.toc.include.labels" select="1"/>
	</x:call>
	<!-- Note: the following value is dependent on the global params set in this xspec document -->
	<!-- If test fails, double-check expected value is in sync with these params -->
	<x:expect label="A navLabel's text content should include labels"
		  test="count(ncx:navPoint/ncx:navLabel[contains(., 'A. ')]) = 1"/>
      </x:scenario>

      <x:scenario label="with $ncx.toc.include.label disabled">
	<x:call>
	  <x:param name="ncx.toc.include.labels" select="0"/>
	</x:call>
	<x:expect label="A navLabel's text content *should not* include labels"
		  test="count(ncx:navPoint/ncx:navLabel[not(contains(., '. '))]) = 1"/>
      </x:scenario>

      <x:scenario label="On a section with a title that contains inlines">
	<x:call>
	  <x:param name="node">
	    <section data-type="appendix">
	      <h1>Tables of <em>Really</em> Crucial Data</h1>
	      <p>Read me, please!</p>
	    </section>
	  </x:param>
	</x:call>
	<x:expect label="A navLabel's text content *should not* contain any inline elements"
		  test="not(exists(ncx:navPoint/ncx:navLabel/ncx:text/*))"/>
      </x:scenario>

      <!-- More robust testing here for src attribute value might be nice. -->
      <x:expect label="A navPoint element should contain a content element with a src attribute"
		test="exists(ncx:navPoint/ncx:content[@src])"/>

    </x:scenario>

</x:description>
