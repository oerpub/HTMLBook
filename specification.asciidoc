== OERBook Specification: Working Pre-Draft 13 July 2013

Requirements for HTML5 elements in the OERBook specification are below. This specification is closely aligned with the HTMLBook specification and also with CNXML, an XML language for open educational resources originated by Rice University's Connexions project. 

The specification differs from HTMLBook and EPUB glosses in the following cases
1. Extensions to support semantic textbook content like exercises.
2. Content that is placement neutral - for instance, footnotes are defined in place with their reference.

Special semantic inflections for +data-type+ attributes, unless otherwise noted, come from http://idpf.org/epub/vocab/structure/[EPUB 3 Structural Semantics Vocabulary]

Many content models refer to "Block elements" or "Inline elements"; please see <<block_elements, Block Elements>> and <<inline_elements, Inline Elements>> for the corresponding list of HTML5 elements that belong to each of these categories.

If no content model or attribute requirements are explicitly specified, then OERBook adopts the corresponding requirements in the http://www.w3.org/html/wg/drafts/html/master/[HTML5 Specification]

=== Revision History and Notes

13 July 2013: Zeroth release of Working Draft, don't pay attention to this yet. Just started with section and para.

=== Book Component elements

These elements will be specified later.

==== Sections

*HTML element*: +<section>+

*Attribute requirements*: +id+

*Optional attribues*: +data-label+, +data-type=''sect<#>''+ for compatibility with HTMLBook, +data-subtype+ A user defined type of section, for compatibility with CNXML. Subtype can be any user-defined value that reflects the purpose of the section.

*Content model*: The first child must be a main heading element corresponding to the title of the section. The hierarchy level can either be +<h1>+ or can correspond to the presumed nesting level of the section to aid older browsers and current screen readers in understanding the document hierarchy. It should be understood that those header levels are merely hints and can be canonicalized as 
+<h1>+ when the world catches up with HTML5. Styling of the headings should be done structurally, according to the section nesting, however, rather than using the header level.

The heading is followed by zero or more subheading elements whose hierarchy level is one lower than the main heading (e.g., +<h2>+ for a +sect1+), folloed by zero or more Block elements, followed by zero or more +<section>+ elements

*Example*:

----
<section data-type="sect1" id="sect1">
  <h1>A-Head</h1>
  <p>If you httpparty, you must party hard</p>
  <!-- Some more paragraphs -->
  <section data-type="sect2" id="sect2" data-label="Custom Label">
    <h2>B-Head</h2>
    <p>What's the frequency, Kenneth?</p>
    <!-- And so on... -->
  </section>
</section>
----

=== Block elements

==== Paragraph

*HTML element*: +<p>+

*Example*:

----
<p>This is a standard paragraph with some <em>emphasized text</em></p>
----

==== CNXML Paragraph's with titles and block content (deprecated)

CNXML had paras that could have titles in them and certain types of block content, like examples and figures. These need to be encoded as divs.

*HTML element*: +<div data-type="para">+ 

*Attribute requirements*: +data-type="para"+

*Content model*: Zero or one <div data-type="title"> element that contains the paragraph title; then zero or more Block elements. Note that we are NOT using headings, because then the nesting level of the para would need to be determined in order to put the right one in.

*Example*:

----
<div data-type="para">
  <div data-type="title">A paragraph title</div>
  <p>This is a titled paragraph with some <em>emphasized text</em></p>
  <table>...</table>
  <p>And then there might be some block content also, because that was legal in CNXML for some reason.</p>
</div>
----

==== Notes, sidebars, and admonitions of various flavors 
Related but tangential content. 

NOTE: HTML5 is kind of confusing on the use of asides. See http://html5doctor.com/aside-revisited/  It would be nice to use the +<aside>+ element for all of these and use +data-type+ to distinguish between them. This is slightly different from what HTMLBook does, but incorporates their use of +sidebar+. 

===== Option 1 (use aside)

*HTML element*: +<aside>+

*Attribute requirements*: +id+, +data-type="note,tip,warning,important,aside,sidebar"+
 
*Optional attributes*: For compatibility with CNXML: + 
 +data-subtype+ (deprecated, use +class+ instead) : A user supplied type. +
 +data-display="none"+ (deprecated, use +class+ instead): To hide the element.
 +data-label+ (deprecated, use +class+ instead) : A user-defined label that overrides or suppresses the label that would normally be supplied.  

*Content model*: Zero or one +<h1>+ - +<h6>+ elements that contains the sidebar title(s)); then zero or more Block elements

*Examples*:

----
<aside data-type="note">
  <h1>Amusing Digression</h1>
  <p>Did you know that in Boston, they call it "soda", and in Chicago, they call it "pop"?</p>
</aside>
----

----
<aside data-type="note">
  <h1>Helpful Info</h1>
  <p>Please take note of this important information</p>
</aside>
----

----
<aside data-type="warning">Make sure to get your AsciiDoc markup right!</aside>
----

===== Option 2 (use div, type, and subtype)

*HTML element*: +<div type="note">+

*Attribute requirements*: +id+, +<div data-type="note">+
 
*Optional attributes*: 
+data-subtype="tip,warning,important,<user supplied subtype>"+ +
For compatibility with CNXML: + 
 +data-subtype+ (deprecated, use +class+ instead) : A user supplied type. +
 +data-display="none"+ : To hide the note.
 +data-label+ (deprecated, use +class+ instead) : A user-defined label that overrides or suppresses the label that would normally be supplied.  

*Content model*: Zero or one +<h1>+ - +<h6>+ elements that contains the sidebar title(s)); then zero or more Block elements

*Examples*:

----
<div data-type="note">
  <h1>Amusing Digression</h1>
  <p>Did you know that in Boston, they call it "soda", and in Chicago, they call it "pop"?</p>
</div>
----

----
<div data-type="note">
  <h1>Helpful Info</h1>
  <p>Please take note of this important information</p>
</div>
----

----
<div data-type="note" data-subtype="warning">Make sure to get your AsciiDoc markup right!</div>
----

==== Inline notes (use span, type, and subtype)
CNXML allowed notes to be inline elements using +display='inline'+

*HTML element*: +<span type="note">+

*Attribute requirements*: +data-type="note"+ 

*Optional attributes*: 
+data-subtype="tip,warning,important,<user supplied subtype>"+ +
For compatibility with CNXML: + 
 +data-subtype+ (deprecated, use +class+ instead) : A user supplied type. +
 +data-display="none"+ : To hide the note.
 +data-label+ (deprecated, use +class+ instead) : A user-defined label that overrides or suppresses the label that would normally be supplied.  

*Content model*: Zero or more flow elements

*Example*:

----
Here is my main point, but (<span data-type="note"><em>Amusing Digression</em>
Did you know that in Boston, they call it "soda", and in Chicago, they call it "pop"?
</span>) and now back to my point.
----

==== Tables

*HTML element*: +<table>+

*Content model*: Zero or one +<caption>+ elements (for titled/captioned tables); then zero or more +<colgroup>+ elements; then zero or more +<thead>+ elements; then a choice between either zero or more +<tbody>+ elements, or zero or more +<tr>+ elements; then zero or more +<tfoot>+ elements

*Content model for <caption>*: Either of the following is acceptable:

* Zero or more +<p>+ and/or +<div>+ elements
* Text and/or zero or more Inline elements

*Content model for <colgroup>*: Mirrors HTML5 Specification

*Content models for <thead>, <tbody>, and <tfoot>*: Mirror HTML5 Specification

*Content model for <tr>*: Mirrors HTML5 Specification, but see content model below for rules for child +<td>+ and +<th>+ elements

*Content model for <td> and <th> elements*: Either of the following is acceptable:

* text and/or zero or more Inline elements
* Zero or more Block elements

*Examples*:

----
<table>
<caption>State capitals</caption>
<tr>
  <th>State</th>
  <th>Capital</th>
</tr>
<tr>
  <td>Massachusetts</td>
  <td>Boston</td>
</tr>
<!-- And so on -->
</table>
----

----
<table>
  <thead>
    <tr>
      <th>First</th>
      <th>Middle Initial</th>  
      <th>Last</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alfred</td>
      <td>E.</td>
      <td>Newman</td>
    </tr>
    <!-- And so on -->
  </tbody>
</table>
----

==== Figures

*HTML element*: +<figure>+

*Content model*: Either of the following is acceptable:

* A +<figcaption>+ element followed by zero or more Block elements and/or +<img>+ elements
* Zero or more Block elements and/or +<img>+ elements, followed by a +<figcaption>+ element

*Example*:

----
<figure>
<figcaption>Adorable cat</figcaption>
<img src="cute_kitty.gif" alt="Photo of an adorable cat"/>
</figure>
----

==== Examples

*HTML element*: +<div>+

*Attribute requirements*: +data-type="example"+

*Content model*: Either of the following content models is acceptable:

* text and/or zero or more Inline elements
* Zero or more ++<h1>++-++<h6>++ elements (for title and subtitles), followed by zero or more Block elements

*Example*:

----
<div data-type="example">
<h5>Hello World in Python</h5>
<pre data-type="programlisting">print "Hello World"</pre>
</div>
----

==== Code listings

*HTML element*: +<pre>+

*Optional HTMLBook-specific attribute*: +data-code-language+, used to indicate language of code listing (e.g., +data-code-language="python"+)

*Example*:

----
<pre data-type="programlisting">print "<em>Hello World</em>"</pre>
----

==== Ordered lists

*HTML element*: +<ol>+

*Content model*: Zero or more +<li>+ children for each list item

*Content model for <li> children*: Either of the following is acceptable:

* text and/or zero or more Inline elements
* Zero or more Block elements

*Example*:

----
<ol>
<li>Step 1</li>
<li>
  <p>Step 2</p>
  <p>Step 2 continued</p>
</li>
<!-- And so on -->
</ol>
----

==== Itemized lists

*HTML element*: +<ul>+

*Content model*: Zero or more +<li>+ children for each list item

*Content model for <li> children*: Either of the following is acceptable:

* text and/or zero or more Inline elements
* Zero or more Block elements

*Example*:

----
<ul>
<li>Red</li>
<li>Orange</li>
<!-- And so on -->
</ul>
----

==== Definition lists


*HTML element*: +<dl>+

*Content model*: Mirrors HTML5 Specification

*Content model for <dt> children*: text and/or zero or more Inline elements

*Content model for <dd> children*: Either of the following is acceptable:

* text and/or zero or more Inline elements
* Zero or more Block elements

*Example*:

----
<dl>
  <dt>Constant Width Bold font</dt>
  <dd>Used to indicate user input</dd>
</dl>
----

==== Blockquote

*HTML element*: +<blockquote>+

*Content model*: Either of the following is acceptable:

* text and/or zero or more Inline elements
* Zero or more Block elements

*Example*:

----
<blockquote data-type="epigraph">
  <p>When in the course of human events...</p>
  <p data-type="attribution">U.S. Declaration of Independence</p>
</blockquote>
----

==== Headings

*HTML elements*: ++<h1>++, ++<h2>++, ++<h3>++, ++<h4>++, ++<h5>++, or ++<h6>++

*Content Model*: text and/or zero or more Inline elements

*Notes*: Many main book components (e.g., chapters, parts, appendixes) require headings. The appropriate
element from ++<h1>++-++<h6>++ is outlined below, as well as in the corresponding documentation for these
components:

----
book title -> h1
part title -> h1
chapter title -> h1
preface title -> h1
appendix title -> h1
colophon title -> h1
dedication title -> h1
glossary title -> h1
bibliography title -> h1
sect1 title -> h1
sect2 title -> h2
sect3 title -> h3
sect4 title -> h4
sect5 title -> h5
sidebar title -> h5
----

==== Equation

*HTML element*: +<div>++

*Attribute requirements*: +data-type="equation"+ footnote:[From DocBook; no close match in EPUB 3 Structural Semantics Vocabulary]

*Note: HTMLBook supports embedded MathML in HTML content documents, which can be used here.

*Example*:

----
<div data-type="equation">
<h5>Pythagorean Theorem</h5>
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup><mi>a</mi><mn>2</mn></msup>
  <mo>+</mo>
  <msup><mi>b</mi><mn>2</mn></msup>
  <mo>=</mo>
  <msup><mi>c</mi><mn>2</mn></msup>
</math>
</div>
----

=== Inline Elements

==== Emphasis (generally for italic)

*HTML element*: +<em>+

Example:

----
<p>I <em>love</em> HTML!</p>
----

==== Strong (generally for bold)


*HTML element*: +<strong>+

Example:

----
<p>I <strong>love</strong> HTML!</p>
----

==== Literal (for inline code elements: variables, functions, etc.)

*HTML element*: +<code>+

Example:

----
<p>Enter <code>echo "Hello World"</code> on the command line</p>
----

==== General-purpose phrase markup for other styling (underline, strikethrough, etc.)

*HTML element*: +<span>+

Example:

----
<p>Use your own +data-type+ or +class+ attributes for custom styling for formatting like <span data-type="strikethrough">strikethrough</span></p>
----

==== Footnote, endnote

*HTML element*: +<a>+ (for marker); +<div>+ for block of footnote/endnote content; +<aside>+ for footnote or endnote

*Attribute requirements*: +data-type="noteref"+ (for marker); +data-type="footnotes"+ or +data-type="rearnotes"+ for block of footnotes/endnotes; +data-type="footnote"+ or +data-type="rearnote"+ for footnote or endnote

*Content model for marker (<a>)*: text and/or zero or more Inline elements

*Content model for footnote (<aside>)*: zero or more Block elements

Example:

----
<p>Five out of every six people who try AsciiDoc prefer it to Markdown<a href="#ftn1" id="ftnref1" data-type="noteref">1</a></p>
<!-- Interceding text -->
<div data-type="footnotes">
<aside data-type="footnote"><sup><a href="#ftn1ref1">1</a></sup> Totally made-up statistic</aside>
</div>
----

==== Cross-references


*HTML element*: +<a>+

*Attribute requirements*: +data-type="xref"+footnote:[From DocBook]; an +href+ attribute that should point to the id of a
local HTMLBook resource referenced; +data-xrefstyle+ (optional) for specifying the style of XREF

Example:

----
<section id="html5" data-type="chapter">
  <h1>Intro to HTML5<h1>
  <p>As I said at the beginning of <a data-type="xref" href="#html5">Chapter 1</a>, HTML5 is great...</p>
  <!-- Blah blah blah -->
</section>
----

==== Index Term

*HTML element*: +<a>+

*Attribute requirements*: +data-type="indexterm"+; for primary index entry value, use +data-primary+; for secondary index entry value, use +data-secondary+; for tertiary index entry value, use +data-tertiary+; for a "see" index reference, use +data-see+; for a "see also" index reference, use +data-seealso+; for a "sort" value to indicate alphabetization, use +data-primary-sortas+, +data-secondary-sortas+, or +data-tertiary-sortas+; for an "end-of-range" tag that marks the end of an index range, use +data-startref="id_of_opening_index_marker"+footnote:[Semantics from DocBook]

*Content model*: Empty

*Example*:

----
<p>The Atlas build system<a data-type="indexterm" data-primary="Atlas" data-secondary="build system"/> lets you build EPUB, Mobi, PDF, and HTML content</p>
----

==== Superscripts

*HTML element*: +<sup>+

*Example*:

----
<p>The area of a circle is πr<sup>2</sup></p>
----

==== Subscripts

*HTML element*: +<sub>+

*Example*:

----
<p>The formula for water is H<sub>2</sub>O</p>
----

=== Interactive Elements

==== Video

*HTML element*: +<video>+

*Example*:

*Note*: Fallback content is _strongly recommended_ for output formats that do not support HTML5 interactive content

----
<video id="asteroids_video" width="480" height="270" controls="controls" poster="images/fallback_image.png">
<source src="video/html5_asteroids.mp4" type="video/mp4"/>
<source src="video/html5_asteroids.ogg" type="video/ogg"/>
<em>Sorry, the &lt;video&gt; element not supported in your
  reading system. View the video online at http://example.com.</em>
</video>
----

==== Audio

*HTML element*: +<audio>+

*Note*: Fallback content is _strongly recommended_ for output formats that do not support HTML5 interactive content

*Example*:

----
<audio id="new_slang">
<source src="audio/new_slang.wav" type="audio/wav"/>
<source src="audio/new_slang.mp3" type="audio/mp3"/>
<source src="audionew_slang.ogg" type="audio/ogg"/>
<em>Sorry, the &lt;audio&gt; element is not supported in your
  reading system. Hear the audio online at http://example.com.</em>
</audio>
----

==== Canvas

*HTML element*: +<canvas>+

*Note*: Should include a fallback link to the audio online.

*Examples*:

----
<canvas id="canvas" width="400" height="400">
 Your browser does not support the HTML 5 Canvas. See the interactive example at http://example.com.
</canvas>
----

=== Metadata

==== Metadata points

*HTML element*: +<meta>+

*Attribute requirements*: +name+ (for name of metadata point); +content+: (for value of metadata point)

*Content model*: Empty

*Note*: All +<meta>+ elements must be children of the +<head>+ element of the HTML file.

*Example*:

----
<head>
  <title>Title of the Book</title>
  <meta name="isbn-13" content="9781449344856"/>
</head>
----

=== Element Classification

[[block_elements]]
==== Block elements

In HTMLBook, the majority of elements classified by the HTML5 specification as Flow content (minus elements also categorized as Heading Content, Phrasing Content, and Sectioning Content) are considered to be Block elements. Here is a complete list:

* +<address>+
* +<aside>+
* +<audio>+
* +<blockquote>+
* +<canvas>+
* +<details>+
* +<div>+
* +<dl>+
* +<embed>+
* +<fieldset>+
* +<figure>+
* +<form>+
* +<hr>+
* +<iframe>+
* +<map>+
* +<math>+ (In MathML vocabulary; must be namespaced under http://www.w3.org/1998/Math/MathML)
* +<menu>+
* +<object>+
* +<ol>+
* +<p>+
* +<pre>+
* +<svg>+ (In SVG vocabulary; must be namespaced under http://www.w3.org/2000/svg)
* +<table>+
* +<ul>+
* +<video>+

[[inline_elements]]
==== Inline elements

In HTMLBook, the majority of elements classified by the HTML5 specification as Phrasing Content are considered to be Inline elements. Here is a complete list:

* +<a>+
* +<abbr>+
* +<b>+
* +<bdi>+
* +<bdo>+
* +<br>+
* +<button>+
* +<command>+
* +<cite>+
* +<code>+
* +<datalist>+
* +<del>+
* +<dfn>+
* +<em>+
* +<i>+
* +<input>+
* +<img>+
* +<ins>+
* +<kbd>+
* +<keygen>+
* +<label>+
* +<mark>+
* +<meter>+
* +<output>+
* +<progress>+
* +<q>+
* +<ruby>+
* +<s>+
* +<samp>+
* +<select>+
* +<small>+
* +<span>+
* +<strong>+
* +<sub>+
* +<sup>+
* +<textarea>+
* +<time>+
* +<u>+
* +<var>+
* +<wbr>+
